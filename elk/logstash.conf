input {
    # beats {
    #     port => 5044
    # }
    tcp {
        port => 24224
        codec => plain {
           charset => "ISO-8859-1"
            # charset => "UTF-8"
        }
    }
}

filter {
    # Remove control characters from the message
    mutate {
        gsub => ["message", "[^\u0020-\u007E]+", ""]  # Keeps only printable ASCII characters
    }

    split {
        field => "message"
    }

    # Updated grok pattern to better capture the JSON properties
    grok {
        match => [
            "message", "(?m)%{GREEDYDATA:UNWANTED}apimMetrics:%{SPACE}(?<apimMetrics>apim:[a-zA-Z]+),.*?properties%{SPACE}:%{SPACE}(?<properties>\{.*\})"
            # "message", "(?m)%{GREEDYDATA:UNWANTED}apimMetrics:%{SPACE}%{WORD:apimMetrics}.*?properties%{SPACE}:%{SPACE}(?<properties>\{.*\})"
        ]
        overwrite => ["message"]
    }

    # Clean up the properties field before JSON parsing
    mutate {
        gsub => [
            "properties", "\\\"", "\"",  # Fix escaped quotes
            "properties", ",\s*$", "",    # Remove trailing commas
            "properties", "}\s*$", "}"    # Ensure proper JSON closing
        ]
    }

    # Parse the JSON with error handling
    json {
        source => "properties"
        target => "parsed_properties"
        skip_on_invalid_json => true
    }

    # If JSON parsing fails, add to tags for debugging
    if "_jsonparsefailure" in [tags] {
        mutate {
            add_tag => ["json_parse_failure"]
        }
    }
}

output {
    stdout { codec => rubydebug }

    if [apimMetrics] == "apim:response" {
        stdout { codec => rubydebug }
        elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "apim_event_response"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
        }
    } else if [apimMetrics] == "apim:faulty" {
        stdout { codec => rubydebug }
        elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "apim_event_faulty"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
        }
    }
}
